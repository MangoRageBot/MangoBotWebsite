buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
        maven {
            url = 'https://repo.mattmalec.com/repository/releases'
        }
        maven {
            url = "https://maven.minecraftforge.net/"
        }
    }

    dependencies {
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.1.2'
        classpath 'org.mangorage:MangoBotGradle:5.0.2'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'MangoBotGradle'
apply plugin: 'maven-publish'

group = 'org.mangorage'
version = getLatestGitTag() + "." + getLatestGitVersion()

def getLatestGitTag() {
    def result = "git describe --long --tags".execute().text.trim()
    if (result.empty) {
        throw new RuntimeException("Failed to retrieve commit count")
    } else {
        return result.split("-")[0]
    }
}

def getLatestGitVersion() {
    def result = "git describe --long --tags".execute().text.trim()
    if (result.empty) {
        throw new RuntimeException("Failed to retrieve commit count")
    } else {
        def commitCount = result.split("-")[1].toInteger()
        return commitCount;
    }
}

println("Version: " + version)

tasks.withType(JavaCompile) {
    options.compilerArgs += "--enable-preview"
}

tasks.withType(JavaExec) {
    jvmArgs += "--enable-preview"
}

repositories {
    mavenCentral()

    maven {
        url = 'https://maven.minecraftforge.net/'
    }
    maven {
        url 'https://m2.dv8tion.net/releases'
    }
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url "https://maven.lavalink.dev/releases/"
    }
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    installer('org.mangorage:installer:4.0.3')
    bot('org.mangorage:mangobot:11.0.23')

    plugin('org.mangorage:mangobotplugin:11.1.9')

    library('org.eclipse.jetty:jetty-server:11.0.16')
    library('org.eclipse.jetty:jetty-servlet:11.0.16')
    library('org.eclipse.jetty:jetty-security:11.+')
    library('org.eclipse.jetty:jetty-util:11.0.16')
    library('org.freemarker:freemarker:2.3.31')
}

configurations.all {
    resolutionStrategy {
        force 'com.google.code.gson:gson:2.11.+'
    }
}

test {
    useJUnitPlatform()
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            mangobot_version: version
    ]
    inputs.properties replaceProperties

    filesMatching(['mangobotsite.plugin.json']) {
        expand replaceProperties + [project: project]
    }
}

MangoBotConfig {
    setJarTask(jar)
}

publishing {
    publications.register("mangobotaddon", MavenPublication) {
        artifact jar

        pom {
            name = 'MangoBot Website Plugin'
            description = 'The Website Plugin for MangoBot'
            url = 'https://github.com/MangoRageBot/MangoBotWebsite'
            issueManagement {
                system = 'github'
                url = 'https://github.com/MangoRageBot/MangoBotWebsite/issues'
            }
            developers {
                developer {
                    id = 'mangorage'
                    name = 'MangoRage'
                }
            }
        }
    }

    repositories {
        maven {
            url = "https://maven.minecraftforge.net/"

            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}